variables:
  QtVersion: 5.14.0

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
      qt_host: linux
      qt_version: ''
      qt_cc: gcc_64
      cc_build_options: '-j'
    windows:
      imageName: windows-2019
      qt_host: windows
      qt_version: win64_msvc2017_64
      qt_cc: msvc2017_64
      cc_build_options: '-m'
      
pool:
  vmImage: $(imageName)

steps:
  - checkout: self
    submodules: true
    
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        gci env:* | sort-object name

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'

  - script: |
      cd $(Build.SourcesDirectory)
      python -m pip install aqtinstall
    displayName: 'Install aqtinstall'

  - script: |
      cd $(Build.SourcesDirectory)
      python -m aqt install --outputdir $(Build.BinariesDirectory)/Qt $(QtVersion) $(qt_host) desktop $(qt_version) -m qtcore qtxml qtnetwork qtwebsockets
    displayName: 'Install Qt $(QtVersion) for $(qt_host) $(qt_version)'

  - task: CMake@1
    displayName: 'Running CMake'
    inputs:
      cmakeArgs: '$(Build.SourcesDirectory) -DCMAKE_PREFIX_PATH=$(Build.BinariesDirectory)/Qt/$(QtVersion)/$(qt_cc)'

  - task: CMake@1
    displayName: 'Building'
    inputs:
      cmakeArgs: '--build . -- $(cc_build_options)'

  - task: PowerShell@2
    displayName: 'Running Tests'
    inputs:
      targetType: 'inline'
      script: 'ctest'
      pwsh: true
      workingDirectory: '$(Build.SourcesDirectory)/build'
    
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/test_results.xml'
      buildPlatform: '$(qt_host)'